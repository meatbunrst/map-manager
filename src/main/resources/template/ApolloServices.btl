package ${g.codePackage}.service;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.cn.common.utils.ToolUtil;
import com.baomidou.mybatisplus.core.mapper.BaseMapper;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.cn.common.service.AbstractService;
import com.baomidou.mybatisplus.extension.toolkit.SqlHelper;
import ${g.codePackage}.entity.${g.entityName}Entity;
import ${g.codePackage}.dao.${g.entityName}Dao;
import java.util.List;
import java.util.Map;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
/**
* ${g.name}Service  业务接口
*
* @author ${g.author}
* @date ${g.date}
*/
@Service
@Transactional(readOnly = true,rollbackFor={RuntimeException.class})
@Slf4j
public class ${g.entityName}Service extends AbstractService<${g.entityName}Dao,${g.entityName}Entity>{

    /**
    * <p>
    * 根据 model 条件，查询总记录数
    * </p>
    *
    * @param model 实体对象
    * @return int
    */
    public Integer selectCount(${g.entityName}Entity model){
        return count(getWrapper(model));
    }

    /**
    * 根据 model 条件，删除
    *
    * @param model 实体对象
    * @return boolean
    */
    @Transactional(rollbackFor={RuntimeException.class})
    public boolean deleteByModel(${g.entityName}Entity model){
        return remove(getWrapper(model));
    }

    /**
    * 根据 model 条件，生成LambdaQueryWrapper
    *
    * @param model 实体对象
    * @return LambdaQueryWrapper
    */
    public LambdaQueryWrapper<${g.entityName}Entity> getWrapper(${g.entityName}Entity model){
        LambdaQueryWrapper<${g.entityName}Entity> wrapper = new LambdaQueryWrapper<>();
            if (model != null){
                <%for(field in t.fields){%>
                if (ToolUtil.isNotEmpty(model.get${strutil.toUpperCase(strutil.subStringTo(field.name,0,1))}${strutil.subString(field.name,1)}())){
                    wrapper.eq(${g.entityName}Entity::get${strutil.toUpperCase(strutil.subStringTo(field.name,0,1))}${strutil.subString(field.name,1)},model.get${strutil.toUpperCase(strutil.subStringTo(field.name,0,1))}${strutil.subString(field.name,1)}());
                }
                <%}%>
            }
        return wrapper;
    }
    /**
    * <p>
    * 根据 entity 条件，查询全部记录
    * </p>
    *
    * @param model 实体对象封装操作类（可以为 null）
    * @return List<${g.entityName}Entity>
    */
    public List<${g.entityName}Entity> selectList(${g.entityName}Entity model){
        return list(getWrapper(model));
    }

    /**
    * 根据 entity 条件，查询全部记录（并翻页）
    *
    * @param pagination 分页查询条件
    * @param model   SQL包装
    * @return List<SystemUserEntity>
    */
    public List<${g.entityName}Entity> selectPage(Page pagination,${g.entityName}Entity model){
        return dao.queryPage(pagination,getWrapper(model));
    }
    /**
    * <p>
    * 根据 entity 条件，查询全部记录（并翻页）
    * </p>
    *
    * @param pagination 分页查询条件
    * @param model   实体对象封装操作可以为 null）
    * @param wrapper   SQL包装
    * @return List<${g.entityName}Entity>
    */
    public List<${g.entityName}Entity> selectPage(Page pagination, ${g.entityName}Entity model,QueryWrapper<${g.entityName}Entity> wrapper){
        return dao.selectPage(pagination,model,wrapper);

    }

    /**
    * 根据 entity 条件，查询全部记录（并翻页）
    *
    * @param pagination 分页查询条件
    * @param wrapper   SQL包装
    * @return List<${g.entityName}Entity>
    */
    public List<${g.entityName}Entity> selectPage(Page pagination,QueryWrapper<${g.entityName}Entity> wrapper){
        return dao.queryPage(pagination,wrapper);
    }

}
